# Tags
-
  docs: |
    ### Tags

    You can wrap content within an html element by just writing the element name at the beginning of a line.

  emblem: |
    h1 Welcome to Emblem

  html: |
    <h1>Welcome to Emblem</h1>


# Indentation Wrapping
-
  docs: |
    ### Indentation Wrapping

    To wrap one element in another, just indent and place the element below.

  emblem: |
    footer
      ul
        li Hello
        li Goodbye

  html: |
    <footer>
      <ul>
        <li>Hello</li>
        <li>Goodbye</li>
      </ul>
    </footer>


# CSS Classes
-
  docs: |
    ### CSS Classes

    CSS classes can added to elements by using a (`.`) with the class name afterwards. You can place this after an element name (`div` is the default tag name).

    You can chain multiple class names.

  emblem: |
    .title Title

    h1.logo Law Blog

    button.btn.btn-large Submit

  html: |
    <div class="title">Title</div>

    <h1 class="logo">Law Blog</h1>

    <button class="btn btn-large">Submit</button>


# IDs
-
  docs: |
    ### IDs

    Element IDs can be added to elements by using `#` before the element id. Like CSS classes, you can provide an element name (`div` is the default tag name).

  emblem: |
    #page-content Content

    span#name Bob Lablah

  html: |
    <div id="page-content">Content</div>

    <span id="name">Bob Lablah</span>


# HTML Attributes
-
  docs: |
    ### HTML Attributes

    HTML attributes can be added right after the element, using `key="value"` pairs.

  emblem: |
    button.close data-dismiss="modal" x

  html: |
    <button class="close" data-dismiss="dropdown">x</a>


# Comments
-
  docs: |
    ### Comments

    Start a line with `/` to add a comment. These lines will be ignored completely.

    You can also use multiple comments by indenting your comment underneath.

  emblem: |
    / Some comment

    / A long long
      multiline comment

# Plain Text
-
  docs: |
    ### Plain Text

    To output content without an element wrapper, start the line with pipe `|`.

    Plain text can include handlebars output tags `{{}}`.

  emblem: |
    | Some content

    p
      | Lorem ipsum dolor sit amet, consectetur adipisicing elit,
      | sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
      | Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris
      | nisi ut aliquip ex ea commodo consequat.

    span.name Your name is {{name}}

  html: |
    Some content

    <p>
      Lorem ipsum dolor sit amet, consectetur adipisicing elit,
      sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris
      nisi ut aliquip ex ea commodo consequat.
    </p>

    <span class="name">Your name is {{name}}.</span>

# Handlebars Expressions
-
  docs: |
    ### Handlebars Expressions

    To output a handlebars expression, use `=` before expression.

  emblem: |
    h1 = name
    p
      = intro
      = highlight name

  html: |
    <h1>{{name}}</h1>
    <p>
      {{intro}}
      {{hightlight name}}
    </p>


# Handlebars Unescaped Expressions
-
  docs: |
    ### Unescaped Expressions

    By default Handlebars html escapes output from expressions. To include html without escaping, use `==` which will output Handlebars "triple-stash" expressions `{{{}}}`.

  emblem: |
    body
      == outlet

  html: |
    <body>
      {{{outlet}}}
    </body>


# Handlebars Flow Statements
-
  docs: |
    ### Handlebars Flow Statements

    You can start handlebars flow statements at the beginning of a line, and indent underneath to create a block.

    This works for all built in handlebars helpers (`if`, `unless`, `with`, `each`). Learn more about them [here](http://handlebarsjs.com/).

  emblem: |
    if loggedIn
      | Hello

    ul
      each person in people
        li = person

  html: |
    {{#if loggedIn}}
      Hello
    {{/if}}

    <ul>
      {{#each person in people}}
        <li>{{person}}</li>
      {{/each}}
    </ul>


# Ember Attributes
-
  docs: |
    ### Expressions within attributes

    To use expressions within the element attributes (often used in Ember with `bindAttr` and `action`), use the `{}` syntax after the element.

  emblem: |
    button{action "delete"} Delete

    img{bindAttr src="logoUrl"} alt="logo"

  html: |
    <button {{action "delete"}}>Delete</button>

    <img {{bindAttr src="logoUrl"}} alt="logo">

# Ember Views
-
  docs: |
    ### Ember Views

    You can quickly and easily include an Ember.js view by starting a line with a capitalized letter. This will automatically wrap the line with a `{{view}}` helper.

  emblem: |
    .field
      Ember.TextField valueBinding="firstName"

  html: |
    <div class="field">
      {{view Ember.TextField valueBinding="firstName"}}
    </div>


# # Title
# -
#   docs: |
#     ### Title
#     description
#   emblem: |
#     Emblem
#   html: |
#     Html result